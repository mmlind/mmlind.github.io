<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>COMPUTER VISION on Matt&#39;s Tech Blog</title>
    <link>https://mmlind.github.io/tags/computer-vision/</link>
    <description>Recent content in COMPUTER VISION on Matt&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 Dec 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://mmlind.github.io/tags/computer-vision/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using logistic regression to classify images</title>
      <link>https://mmlind.github.io/post/2017-12-26-using_logistic_regression_to_classify_images/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mmlind.github.io/post/2017-12-26-using_logistic_regression_to_classify_images/</guid>
      <description>
        
          
            In this blog post I show how to use logistic regression to classify images. Logistic regression is a statistical method for binary classification, i.e. for analyzing the dependency of a binary outcome on one or more independent variables.
    In a previous blog post I described linear regression. If you’re not familiar with linear regression read that post first.
Let’s briefly recap:
Linear Regression Linear regression is a statistical method for predicting the value of a continuous dependent variable based on one or several explanatory variables.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Deep Neural Network for MNIST Handwriting Recognition</title>
      <link>https://mmlind.github.io/post/2016-02-12-deep_neural_network_for_mnist_handwriting_recognition/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mmlind.github.io/post/2016-02-12-deep_neural_network_for_mnist_handwriting_recognition/</guid>
      <description>
        
          
            I finally found some time to enhance my neural network to support deep learning. The network now masters a variable number of layers and is capable of running convolutional layers. The architecture is generic, light weight (very small memory footprint) and super fast. :-)
    In a previous blog post I wrote about a simple 3-Layer neural network for MNIST handwriting recognition that I built. Its architecture -- a 3-layer structure with exactly 1 hidden layer -- was fix.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Simple 3-Layer Neural Network for MNIST Handwriting Recognition</title>
      <link>https://mmlind.github.io/post/2015-08-09-simple_3-layer_neural_network_for_mnist_handwriting_recognition/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mmlind.github.io/post/2015-08-09-simple_3-layer_neural_network_for_mnist_handwriting_recognition/</guid>
      <description>
        
          
            I&#39;ve extended my simple 1-Layer neural network to include a hidden layer and use the back propagation algorithm for updating connection weights. The size of the network (number of neurons per layer) is dynamic. It&#39;s accuracy in classifying the handwritten digits in the MNIST database improved from 85% to &amp;gt;91%.
    In a previous blog post I introduced a simple 1-Layer neural network for MNIST handwriting recognition. It was based on a single layer of perceptrons whose connection weights are adjusted during a supervised learning process.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Simple 1-Layer Neural Network for MNIST Handwriting Recognition</title>
      <link>https://mmlind.github.io/post/2015-07-15-simple_1-layer_neural_network_for_mnist_handwriting_recognition/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mmlind.github.io/post/2015-07-15-simple_1-layer_neural_network_for_mnist_handwriting_recognition/</guid>
      <description>
        
          
            In this post I&#39;ll explore how to use a very simple 1-layer neural network to recognize the handwritten digits in the MNIST database.
    In my previous blog post I gave a brief introduction how neural networks basically work. In this post I want to apply this know-how and write some code to recognize handwritten digits in images.
Image Recognition For the computer an image is just a collection of pixels with different colors.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
